buildscript {
    String thorntailVersion = System.getProperty('thorntailVersion') ?: VERSION_THORNTAIL

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath "io.thorntail:thorntail-gradle-plugin:$thorntailVersion"
    }
}

String thorntailVersion = System.getProperty('thorntailVersion') ?: VERSION_THORNTAIL

// We are going to publish a "BOM" style artifact from this module.
apply plugin: 'java-platform'

// ----------------------------------------------------
//
// Define the constraints exported by this platform.
//
// ----------------------------------------------------

javaPlatform {
    allowDependencies()
}

dependencies {

    constraints {

        // The recommended version of Thorntail.
        api "io.thorntail:bom-all:$VERSION_THORNTAIL"

        // Export the library module.
        api project(':library-module')
    }
}


// Project details
allprojects {
    group = 'io.thorntail.examples.gradle'
    version = '0.0.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'thorntail-arquillian'

    // Configure the repositories for all projects.
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://maven.repository.redhat.com/nexus/content/repositories/thirdparty-releases/'
        }
        maven {
            name 'Gradle Tooling'
            url 'https://repo.gradle.org/gradle/libs-releases/'
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }


    dependencies {

        // We wish to code against the JEE APIs
        compileOnly 'jakarta.platform:jakarta.jakartaee-api:8.0.0'
        testCompileOnly 'jakarta.platform:jakarta.jakartaee-api:8.0.0'

        // Include the Thorntail BOM for testing the code.
        testImplementation platform("io.thorntail:bom-all:$thorntailVersion")

        testImplementation "junit:junit:4.12"

        // Include the Arquillian JaCoCo extension
        testImplementation 'org.jboss.arquillian.extension:arquillian-jacoco:1.0.0.Alpha9'

    }

    // Configure the properties required for enabling the JaCoCo agent withing Arquillian tests
    test {

        testLogging {
            showStandardStreams = true
        }

        // If you do not pull in any dependencies dynamically as part of archive creation, then it is recommended that
        // you set the following property as it can speed up your test execution.
        // systemProperty 'swarm.resolver.offline', true

        doFirst {
            // Gradle starts the test task with the JaCoCo agent configured.
            // The Arquillian tests are run in a separate thread which does not have the JaCoCo agent enabled.
            // In the below code, we retrieve the JaCoCo details and make it available as a system property that is
            // consumed by the "arquillian.xml" file in the "test/resources" folder.
            String arg = jacoco.asJvmArg
            String dir = project.buildDir
            arg = arg.replaceAll(project.relativePath(dir), dir)
            systemProperty 'thorntail.arquillian.jvm.args', arg
            systemProperty 'thorntailVersion', thorntailVersion
        }
    }

    // Optional configuration
    // ----------------------
    // The following property is needed *only if* you have a pom.xml file along with your build.gradle script.
    // Otherwise, you do not need to set this property.
    afterEvaluate { Project project ->
        if (project.pluginManager.hasPlugin('java')) {
            project.test {
                systemProperty 'thorntail.filesystem.layout.class', 'org.wildfly.swarm.internal.GradleFileSystemLayout'
            }
        }
    }
}

